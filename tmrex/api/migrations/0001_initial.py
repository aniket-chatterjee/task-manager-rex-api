# Generated by Django 3.0.7 on 2020-06-30 13:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('hex_color', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('started_on', models.DateTimeField(null=True, verbose_name='Porject started on ')),
                ('state', models.CharField(choices=[('ACTIVE', 'Project is at ACTIVE state'), ('INACTIVE', 'Project is INACTIVE '), ('ARCHIVED', 'Project has been archived')], default='ACTIVE', max_length=50, verbose_name='Project state, Active, inactive etc')),
                ('ended_on', models.DateTimeField(null=True, verbose_name='Project ended on')),
                ('avatar', models.ImageField(max_length=1024, upload_to='media/project', verbose_name='Project Avatar')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_by_project', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_by_project', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RelatedTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_connected_as', models.TextField(choices=[('PARENT_TASK_OF', 'Parent task'), ('SUB_TASK_OF', 'Sub task'), ('BLOCKED_BY', 'BlockedBy'), ('IS_BLOCKING', 'IsBlocking'), ('RELATED_TASK', 'Just related')], max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='task title')),
                ('description', models.TextField(null=True, verbose_name='task description')),
                ('estimated_hours', models.IntegerField(default=0, verbose_name='estimated hours')),
                ('hours_spent', models.IntegerField(default=0, verbose_name='hours spent on the task')),
                ('started_on', models.DateTimeField(null=True, verbose_name='store last start datetime')),
                ('ended_on', models.DateTimeField(null=True, verbose_name='store last end datetime')),
                ('due_on', models.DateTimeField(null=True, verbose_name='Task due date, if any')),
                ('state', models.CharField(choices=[('OPENED', 'Task is at opened state'), ('BLOCKED', 'task is blocked by some task'), ('CLOSED', 'completed/closed '), ('ARCHIVED', 'task has been archived'), ('REVIEW_PENDING', 'requires a review')], default='OPENED', max_length=50, verbose_name='TaskState, like Open,closed, blocked, archived, based on project may be')),
                ('avatar', models.ImageField(max_length=1024, upload_to='media/task', verbose_name='Task Avatar')),
                ('assignee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignee_task', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_task', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Project', verbose_name='')),
                ('related_tasks', models.ManyToManyField(related_name='_task_related_tasks_+', through='api.RelatedTask', to='api.Task', verbose_name='related tasks')),
            ],
        ),
        migrations.CreateModel(
            name='TaskUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access', models.TextField(choices=[('OWNER', 'Owner'), ('PARTICIPANT', 'Participant'), ('GUEST', 'Guest')], default='GUEST', verbose_name='Access to Task')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_users', to='api.Task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'base_manager_name': 'special_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('special_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='relatedtask',
            name='task_a',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_a', to='api.Task'),
        ),
        migrations.AddField(
            model_name='relatedtask',
            name='task_b',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_b', to='api.Task'),
        ),
        migrations.CreateModel(
            name='ProjectUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access', models.TextField(choices=[('OWNER', 'Owner'), ('PARTICIPANT', 'Participant'), ('GUEST', 'Guest')], default='GUEST', verbose_name='Access to Project')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_users', to='api.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'base_manager_name': 'special_manager',
            },
            managers=[
                ('special_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
